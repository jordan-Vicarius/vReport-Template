-- =====================================================
-- PATCH-TO-VULNERABILITY MAPPING ANALYSIS
-- WITHOUT alive = true filter
-- =====================================================

WITH 

-- Get all vulnerabilities with their patch requirements
vulnerabilities_needing_patches AS (
    SELECT DISTINCT
        av.endpoint_id,
        av.endpoint_hash,
        av.cve,
        av.product_name,
        av.patch_name as required_patch,
        av.patchid as required_patchid,
        av.vulnerability_v3_base_score as cvss_score,
        CASE 
            WHEN av.vulnerability_v3_base_score >= 9.0 THEN 'Critical'
            WHEN av.vulnerability_v3_base_score >= 7.0 THEN 'High'
            WHEN av.vulnerability_v3_base_score >= 4.0 THEN 'Medium'
            ELSE 'Low'
        END as severity
    FROM activevulnerabilities av
),

-- Get all available patches per endpoint
available_patches AS (
    SELECT DISTINCT
        ap.endpoint_hash,
        ap.patchid,
        ap.patch_id,
        ap.patch_name,
        ap.asset as product_name,
        ap.severity_level,
        ap.severity_name,
        ap.description
    FROM assetspatchs ap
),

-- Match patches to vulnerabilities
patch_vulnerability_matches AS (
    SELECT 
        vnp.endpoint_id,
        vnp.endpoint_hash,
        vnp.cve,
        vnp.product_name as vuln_product,
        vnp.required_patch,
        vnp.cvss_score,
        vnp.severity as vuln_severity,
        
        -- Check if exact patch name match exists (only when patch_name is specified)
        CASE 
            WHEN vnp.required_patch IS NOT NULL 
            AND EXISTS (
                SELECT 1 FROM available_patches ap 
                WHERE ap.endpoint_hash = vnp.endpoint_hash 
                AND ap.patch_name IS NOT NULL
                AND ap.patch_name = vnp.required_patch
            ) THEN true 
            ELSE false 
        END as has_exact_patch_match,
        
        -- Check if product has any patch available (only when product_name is specified)
        CASE 
            WHEN vnp.product_name IS NOT NULL 
            AND EXISTS (
                SELECT 1 FROM available_patches ap 
                WHERE ap.endpoint_hash = vnp.endpoint_hash 
                AND ap.product_name IS NOT NULL
                AND ap.product_name = vnp.product_name
            ) THEN true 
            ELSE false 
        END as has_product_patch,
        
        -- Check if patchid matches (only when patchid is specified)
        CASE 
            WHEN vnp.required_patchid IS NOT NULL 
            AND EXISTS (
                SELECT 1 FROM available_patches ap 
                WHERE ap.endpoint_hash = vnp.endpoint_hash 
                AND ap.patchid IS NOT NULL
                AND ap.patchid = vnp.required_patchid
            ) THEN true 
            ELSE false 
        END as has_patchid_match,
        
        -- Get matching patch details (only match on non-null values)
        (
            SELECT patch_name 
            FROM available_patches ap 
            WHERE ap.endpoint_hash = vnp.endpoint_hash 
            AND (
                (vnp.required_patch IS NOT NULL AND ap.patch_name IS NOT NULL AND ap.patch_name = vnp.required_patch)
                OR (vnp.product_name IS NOT NULL AND ap.product_name IS NOT NULL AND ap.product_name = vnp.product_name)
                OR (vnp.required_patchid IS NOT NULL AND ap.patchid IS NOT NULL AND ap.patchid = vnp.required_patchid)
            )
            LIMIT 1
        ) as matched_patch_name
        
    FROM vulnerabilities_needing_patches vnp
),

-- Aggregate by endpoint
endpoint_patch_coverage AS (
    SELECT 
        endpoint_id,
        COUNT(*) as total_vulnerabilities,
        COUNT(CASE WHEN has_exact_patch_match THEN 1 END) as vulns_with_exact_patch,
        COUNT(CASE WHEN has_product_patch THEN 1 END) as vulns_with_product_patch,
        COUNT(CASE WHEN has_patchid_match THEN 1 END) as vulns_with_patchid_match,
        COUNT(CASE WHEN has_exact_patch_match OR has_product_patch OR has_patchid_match THEN 1 END) as vulns_with_any_patch,
        COUNT(CASE WHEN NOT (has_exact_patch_match OR has_product_patch OR has_patchid_match) THEN 1 END) as vulns_without_patches,
        
        -- By severity
        COUNT(CASE WHEN vuln_severity = 'Critical' AND (has_exact_patch_match OR has_product_patch OR has_patchid_match) THEN 1 END) as critical_with_patches,
        COUNT(CASE WHEN vuln_severity = 'Critical' THEN 1 END) as total_critical,
        COUNT(CASE WHEN vuln_severity = 'High' AND (has_exact_patch_match OR has_product_patch OR has_patchid_match) THEN 1 END) as high_with_patches,
        COUNT(CASE WHEN vuln_severity = 'High' THEN 1 END) as total_high
    FROM patch_vulnerability_matches
    GROUP BY endpoint_id
),

-- Count patches targeting vulnerable vs non-vulnerable software
patch_targeting_analysis AS (
    SELECT 
        ap.endpoint_hash,
        COUNT(DISTINCT ap.patchid) as total_patches,
        
        -- Patches that address active vulnerabilities (with proper NULL handling)
        COUNT(DISTINCT CASE 
            WHEN EXISTS (
                SELECT 1 FROM vulnerabilities_needing_patches vnp 
                WHERE vnp.endpoint_hash = ap.endpoint_hash 
                AND (
                    (vnp.required_patch IS NOT NULL AND ap.patch_name IS NOT NULL AND vnp.required_patch = ap.patch_name)
                    OR (vnp.product_name IS NOT NULL AND ap.product_name IS NOT NULL AND vnp.product_name = ap.product_name)
                    OR (vnp.required_patchid IS NOT NULL AND ap.patchid IS NOT NULL AND vnp.required_patchid = ap.patchid)
                )
            ) THEN ap.patchid 
        END) as patches_for_vulnerable_software,
        
        -- Patches for software without known vulnerabilities
        COUNT(DISTINCT CASE 
            WHEN NOT EXISTS (
                SELECT 1 FROM vulnerabilities_needing_patches vnp 
                WHERE vnp.endpoint_hash = ap.endpoint_hash 
                AND (
                    (vnp.required_patch IS NOT NULL AND ap.patch_name IS NOT NULL AND vnp.required_patch = ap.patch_name)
                    OR (vnp.product_name IS NOT NULL AND ap.product_name IS NOT NULL AND vnp.product_name = ap.product_name)
                    OR (vnp.required_patchid IS NOT NULL AND ap.patchid IS NOT NULL AND vnp.required_patchid = ap.patchid)
                )
            ) THEN ap.patchid 
        END) as patches_for_non_vulnerable_software,
        
        -- By severity (with proper NULL handling)
        COUNT(DISTINCT CASE 
            WHEN (ap.severity_level IN ('Critical', 'High') OR ap.severity_name IN ('Critical', 'High'))
            AND EXISTS (
                SELECT 1 FROM vulnerabilities_needing_patches vnp 
                WHERE vnp.endpoint_hash = ap.endpoint_hash 
                AND vnp.severity IN ('Critical', 'High')
                AND (
                    (vnp.required_patch IS NOT NULL AND ap.patch_name IS NOT NULL AND vnp.required_patch = ap.patch_name)
                    OR (vnp.product_name IS NOT NULL AND ap.product_name IS NOT NULL AND vnp.product_name = ap.product_name)
                    OR (vnp.required_patchid IS NOT NULL AND ap.patchid IS NOT NULL AND vnp.required_patchid = ap.patchid)
                )
            ) THEN ap.patchid 
        END) as critical_high_patches_for_critical_high_vulns
        
    FROM available_patches ap
    GROUP BY ap.endpoint_hash
)

-- =====================================================
-- FINAL AGGREGATED RESULTS
-- =====================================================
SELECT 
    -- ===== VULNERABILITY-TO-PATCH COVERAGE =====
    
    COUNT(DISTINCT epc.endpoint_id) as total_endpoints_analyzed,

    SUM(epc.total_vulnerabilities) as total_vulnerabilities,
    SUM(epc.vulns_with_any_patch) as vulns_with_matching_patches,
    SUM(epc.vulns_without_patches) as vulns_without_matching_patches,
    
    ROUND(
        100.0 * SUM(epc.vulns_with_any_patch) / NULLIF(SUM(epc.total_vulnerabilities), 0),
        2
    ) as pct_vulns_with_patch_coverage,
    
    ROUND(
        100.0 * SUM(epc.vulns_with_exact_patch) / NULLIF(SUM(epc.total_vulnerabilities), 0),
        2
    ) as pct_vulns_with_exact_patch_match,
    
    -- ===== SEVERITY-BASED COVERAGE =====
    
    SUM(epc.total_critical) as total_critical_vulns,
    SUM(epc.critical_with_patches) as critical_vulns_with_patches,
    ROUND(
        100.0 * SUM(epc.critical_with_patches) / NULLIF(SUM(epc.total_critical), 0),
        2
    ) as pct_critical_vulns_with_patches,
    
    SUM(epc.total_high) as total_high_vulns,
    SUM(epc.high_with_patches) as high_vulns_with_patches,
    ROUND(
        100.0 * SUM(epc.high_with_patches) / NULLIF(SUM(epc.total_high), 0),
        2
    ) as pct_high_vulns_with_patches,
    
    -- ===== PATCH-TO-VULNERABLE-SOFTWARE RATIO =====
    -- This is the KEY METRIC you requested
    
    SUM(pta.total_patches) as total_available_patches,
    SUM(pta.patches_for_vulnerable_software) as patches_targeting_vulnerable_software,
    SUM(pta.patches_for_non_vulnerable_software) as patches_for_non_vulnerable_software,
    
    ROUND(
        100.0 * SUM(pta.patches_for_vulnerable_software) / NULLIF(SUM(pta.total_patches), 0),
        2
    ) as pct_patches_for_vulnerable_software,
    
    ROUND(
        100.0 * SUM(pta.patches_for_non_vulnerable_software) / NULLIF(SUM(pta.total_patches), 0),
        2
    ) as pct_patches_for_non_vulnerable_software,
    
    -- Critical/High patches for Critical/High vulnerabilities
    SUM(pta.critical_high_patches_for_critical_high_vulns) as critical_high_patches_matched,
    
    -- ===== MATCH TYPE BREAKDOWN =====
    
    SUM(epc.vulns_with_exact_patch) as vulns_with_exact_patch_name_match,
    SUM(epc.vulns_with_product_patch) as vulns_with_product_level_match,
    SUM(epc.vulns_with_patchid_match) as vulns_with_patchid_match,
    
    -- ===== EFFICIENCY RATIOS =====
    
    -- Average patches per vulnerability (how many patches resolve each vuln)
    ROUND(
        SUM(pta.patches_for_vulnerable_software)::numeric / NULLIF(SUM(epc.vulns_with_any_patch), 0),
        2
    ) as avg_patches_per_covered_vulnerability,
    
    -- Patch efficiency (vulnerabilities covered per patch)
    ROUND(
        SUM(epc.vulns_with_any_patch)::numeric / NULLIF(SUM(pta.patches_for_vulnerable_software), 0),
        2
    ) as avg_vulns_covered_per_patch

FROM endpoint_patch_coverage epc
LEFT JOIN endpoints e ON epc.endpoint_id = e.endpoint_id
LEFT JOIN patch_targeting_analysis pta ON e.endpoint_hash = pta.endpoint_hash;